import telebot
from telebot.types import InlineQueryResultArticle, InputTextMessageContent, InlineKeyboardMarkup, InlineKeyboardButton
import os
import time

TOKEN = "7696280451:AAFA70tdSTfOXpdS97v8PIkcOqRhWeIvbLg"
LOG_FILE = 'forelka.log'

bot = telebot.TeleBot(TOKEN)
START_TIME = time.time()
CACHE = {}
CACHE_TTL = 30

def read_log_lines(num_lines=20):
    if not os.path.exists(LOG_FILE):
        return "–õ–æ–≥-—Ñ–∞–π–ª –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç."
    with open(LOG_FILE, "r", encoding="utf-8") as f:
        lines = f.readlines()
    return "".join(lines[-num_lines:]).strip() or "–õ–æ–≥ –ø—É—Å—Ç."

def search_logs(keyword, max_results=10):
    if not os.path.exists(LOG_FILE):
        return "–õ–æ–≥-—Ñ–∞–π–ª –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç."
    keyword = keyword.lower()
    found = []
    with open(LOG_FILE, "r", encoding="utf-8") as f:
        for line in f:
            if keyword in line.lower():
                found.append(line.strip())
                if len(found) >= max_results:
                    break
    if not found:
        return f"–ü–æ –∑–∞–ø—Ä–æ—Å—É '{keyword}' –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."
    return "\n".join(found)

def format_uptime(seconds):
    m, s = divmod(seconds, 60)
    h, m = divmod(m, 60)
    d, h = divmod(h, 24)
    parts = []
    if d > 0:
        parts.append(f"{int(d)}–¥")
    if h > 0:
        parts.append(f"{int(h)}—á")
    if m > 0:
        parts.append(f"{int(m)}–º")
    parts.append(f"{int(s)}—Å")
    return " ".join(parts)

def get_status_text():
    uptime = format_uptime(time.time() - START_TIME)
    return f"üü¢ <b>–°—Ç–∞—Ç—É—Å Forelka</b>\n\nüïí –ê–ø—Ç–∞–π–º: {uptime}\nüìÑ –õ–æ–≥-—Ñ–∞–π–ª: {'–µ—Å—Ç—å' if os.path.exists(LOG_FILE) else '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}"

def build_keyboard():
    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        InlineKeyboardButton("üìÑ –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏", switch_inline_query_current_chat=""),
        InlineKeyboardButton("üîç –ü–æ–∏—Å–∫ –≤ –ª–æ–≥–∞—Ö", switch_inline_query_current_chat="search "),
    )
    keyboard.add(
        InlineKeyboardButton("‚ÑπÔ∏è –°—Ç–∞—Ç—É—Å", switch_inline_query_current_chat="status"),
    )
    return keyboard

@bot.inline_handler(lambda query: True)
def inline_query_handler(inline_query):
    query = inline_query.query.strip()

    cache_entry = CACHE.get(query)
    if cache_entry and (time.time() - cache_entry[0]) < CACHE_TTL:
        results = cache_entry[1]
        bot.answer_inline_query(inline_query.id, results, cache_time=1)
        return

    results = []

    if query == "":
        text = read_log_lines(20)
        results.append(InlineQueryResultArticle(
            id="last_logs",            title="üìÑ –ü–æ—Å–ª–µ–¥–Ω–∏–µ 20 —Å—Ç—Ä–æ–∫ –ª–æ–≥–∞",
            input_message_content=InputTextMessageContent(message_text=text),
            description="–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ 20 —Å—Ç—Ä–æ–∫ –ª–æ–≥–∞",
            reply_markup=build_keyboard()
        ))
    elif query.lower() == "status":
        text = get_status_text()
        results.append(InlineQueryResultArticle(
            id="status",
            title="‚ÑπÔ∏è –°—Ç–∞—Ç—É—Å Forelka",
            input_message_content=InputTextMessageContent(message_text=text, parse_mode="HTML"),
            description="–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –∏ –∞–ø—Ç–∞–π–º",
            reply_markup=build_keyboard()
        ))
    elif query.lower().startswith("search "):
        keyword = query[7:].strip()
        if not keyword:
            text = "–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã 'search'"
        else:
            text = search_logs(keyword, max_results=15)
        results.append(InlineQueryResultArticle(
            id="search",
            title=f"üîç –ü–æ–∏—Å–∫: {keyword}" if keyword else "üîç –ü–æ–∏—Å–∫ –≤ –ª–æ–≥–∞—Ö",
            input_message_content=InputTextMessageContent(message_text=text),
            description=f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –ø–æ '{keyword}'",
            reply_markup=build_keyboard()
        ))
    else:
        text = "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n" \
               "- –ü—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å ‚Äî –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –ª–æ–≥–∞\n" \
               "- status ‚Äî —Å—Ç–∞—Ç—É—Å —é–∑–µ—Ä–±–æ—Ç–∞\n" \
               "- search <—Å–ª–æ–≤–æ> ‚Äî –ø–æ–∏—Å–∫ –ø–æ –ª–æ–≥–∞–º"
        results.append(InlineQueryResultArticle(
            id="help",
            title="‚ùì –ü–æ–º–æ—â—å –ø–æ –∫–æ–º–∞–Ω–¥–∞–º",
            input_message_content=InputTextMessageContent(message_text=text),
            description="–ü–æ–º–æ—â—å",
            reply_markup=build_keyboard()
        ))

    CACHE[query] = (time.time(), results)
    bot.answer_inline_query(inline_query.id, results, cache_time=1)

if __name__ == "__main__":
    print("–ò–Ω–ª–∞–π–Ω-–±–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    bot.infinity_polling()