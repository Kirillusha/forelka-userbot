import asyncio
import shlex
from pyrogram.types import Message

async def terminal(client, message: Message, args):
    if not args:
        await message.edit_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è.")
        return
    
    command_str = " ".join(args)
    try:
        # –†–∞–∑–±–∏—Ä–∞–µ–º –∫–æ–º–∞–Ω–¥—É –Ω–∞ —á–∞—Å—Ç–∏
        # –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ –º–æ–∂–µ–º —Å—Ä–∞–∑—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å shell-–∫–æ–º–∞–Ω–¥—É
        # –Ω–æ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏ –≥–∏–±–∫–æ—Å—Ç–∏ –ª—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å create_subprocess_shell
        process = await asyncio.create_subprocess_shell(
            command_str,
            stdout=asyncio.subprocess.PIPE,
            stderr=asyncio.subprocess.PIPE
        )
        stdout, stderr = await process.communicate()
        
        output = stdout.decode().strip()
        error = stderr.decode().strip()

        if output:
            response = f"üü¢ –†–µ–∑—É–ª—å—Ç–∞—Ç:\n{output}"
        elif error:
            response = f"üî¥ –û—à–∏–±–∫–∞:\n{error}"
        else:
            response = "–ö–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞, –Ω–æ –≤—ã–≤–æ–¥ –ø—É—Å—Ç."

        max_length = 4000
        for i in range(0, len(response), max_length):
            chunk = response[i:i+max_length]
            try:
                # –ï—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–π —Ä–∞–∑, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º message.edit_text
                await message.edit_text(chunk)
            except Exception:
                # –ï—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–µ–ª—å–∑—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–µ—Ä–≤—ã–π —Ä–∞–∑), –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
                # –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö –ø—Ä–∞–≤–æ–∫
                message = await message.edit_text(chunk)
        
    except Exception as e:
        try:
            await message.edit_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã: {e}")
        except Exception:
            await message.reply(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã: {e}")

def register(app, commands, prefix, module_name):
    commands["terminal"] = {
        "func": terminal,
        "desc": "–í—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ —Ö–æ—Å—Ç–∏–Ω–≥–∞ –∏ –≤–µ—Ä–Ω—É—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç",
        "module": module_name
    }